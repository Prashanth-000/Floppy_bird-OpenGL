1.JUMP_BALL
    #include <GL/freeglut.h>
    #include <math.h>
    #include <cstdlib>
    #include <ctime>
    #include <vector>

    struct Ball {
        float x, y;
        float dx, dy;
        float r, g, b;
    };

    std::vector<Ball> trail;
    Ball ball = { 0.0f, 0.0f, 0.01f, 0.012f, 1.0f, 0.0f, 0.0f };
    bool isAnimating = true;

    float bgColor[3] = { 0.5f, 0.7f, 0.0f }; // Background color (black by default)

    // Function to draw a circle
    void drawCircle(float cx, float cy, float r) {
        glBegin(GL_TRIANGLE_FAN);
        for (int i = 0; i < 100; i++) {
            float angle = 2 * 3.14159f * i / 100;
            glVertex2f(cx + r * cos(angle), cy + r * sin(angle));
        }
        glEnd();
    }

    // Display callback function
    void display() {
        glClear(GL_COLOR_BUFFER_BIT);

        // Set the background color
        glClearColor(bgColor[0], bgColor[1], bgColor[2], 1.0f);

        // Draw trail
        float fade = 0.1f;
        for (const auto& t : trail) {
            glColor4f(t.r, t.g, t.b, fade);
            drawCircle(t.x, t.y, 0.05f);
            fade += 0.1f;
        }

        // Draw ball
        glColor3f(ball.r, ball.g, ball.b);
        drawCircle(ball.x, ball.y, 0.05f);

        glutSwapBuffers();
    }

    // Timer function to animate the ball
    void timer(int) {
        if (isAnimating) {
            // Add current ball to trail
            trail.push_back(ball);
            if (trail.size() > 10) trail.erase(trail.begin());

            // Move ball
            ball.x += ball.dx;
            ball.y += ball.dy;

            // Bounce & change color
            if (ball.x < -0.95f || ball.x > 0.95f) {
                ball.dx *= -1;
                ball.r = (rand() % 100) / 100.0f;
                ball.g = (rand() % 100) / 100.0f;
                ball.b = (rand() % 100) / 100.0f;
            }
            if (ball.y < -0.95f || ball.y > 0.95f) {
                ball.dy *= -1;
                ball.r = (rand() % 100) / 100.0f;
                ball.g = (rand() % 100) / 100.0f;
                ball.b = (rand() % 100) / 100.0f;
            }

            glutPostRedisplay();
        }

        glutTimerFunc(16, timer, 0);
    }

    // Keyboard function to toggle animation
    void keyboard(unsigned char key, int, int) {
        if (key == 's') isAnimating = true;  // Start animation
        if (key == 'p') isAnimating = false; // Pause animation
    }

    // Menu callback to start/stop animation
    void menu(int value) {
        if (value == 1) {
            isAnimating = true;
        } else if (value == 2) {
            isAnimating = false;
        }
        glutPostRedisplay();
    }

    // Function to create the menu
    void createMenu() {
        int animationMenu = glutCreateMenu(menu);
        glutAddMenuEntry("Start Animation", 1);
        glutAddMenuEntry("Pause Animation", 2);

        glutCreateMenu(menu);
        glutAddSubMenu("Animation Controls", animationMenu);
        glutAttachMenu(GLUT_RIGHT_BUTTON);
    }

    // Main function
    int main(int argc, char** argv) {
        srand(time(0));
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
        glutInitWindowSize(600, 600);
        glutCreateWindow("Colorful Bouncing Ball");

        glClearColor(0, 0, 0, 1); // Default black background

        glMatrixMode(GL_PROJECTION);
        gluOrtho2D(-1, 1, -1, 1);

        // Create menu
        createMenu();

        // Register callbacks
        glutDisplayFunc(display);
        glutKeyboardFunc(keyboard);
        glutTimerFunc(0, timer, 0);

        glutMainLoop();
        return 0;
    }

2.Growing Shrinking ball

    #include <GL/freeglut.h>
    #include <cmath>

    float radius = 0.1f;  // Initial radius of the circle
    float direction = 0.01f;  // Direction of the radius change (expand/shrink)

    void drawCircle(float cx, float cy, float r) {
        glBegin(GL_TRIANGLE_FAN);
        for (int i = 0; i < 100; i++) {
            float angle = 2 * 3.14159f * i / 100;
            glVertex2f(cx + r * cos(angle), cy + r * sin(angle));
        }
        glEnd();
    }

    void display() {
        glClear(GL_COLOR_BUFFER_BIT);

        // Draw the pulsating circle
        glColor3f(0.0f, 0.0f, 1.0f);  // Blue color
        drawCircle(0.0f, 0.0f, radius);

        glutSwapBuffers();
    }

    void timer(int) {
        radius += direction;

        // Reverse the direction when the circle reaches a certain size
        if (radius > 0.5f || radius < 0.1f) {
            direction = -direction;
        }

        glutPostRedisplay();
        glutTimerFunc(16, timer, 0);
    }

    int main(int argc, char** argv) {
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
        glutInitWindowSize(600, 600);
        glutCreateWindow("Growing and Shrinking Circle");

        glClearColor(0, 0, 0, 1);  // Black background
        glMatrixMode(GL_PROJECTION);
        gluOrtho2D(-1, 1, -1, 1);

        glutDisplayFunc(display);
        glutTimerFunc(0, timer, 0);
        glutMainLoop();

        return 0;
    }

3. floppy bird

        #include <GL/freeglut.h>
        #include<stdio.h>
        #include <stdlib.h>
        #include <stdbool.h>
        #include <time.h>

        #define WINDOW_WIDTH 500
        #define WINDOW_HEIGHT 500

        float birdY = 300.0f;
        float birdVelocity = 0.0f;
        float gravity = -0.5f;
        bool gameOver = false;
        bool gameStarted = false;

        float pipeX = 800.0f;
        float pipeWidth = 80.0f;
        float gapY = 300.0f;
        float gapHeight = 200.0f;

        int score = 0;
        bool passedPipe = false;

        void drawRect(float x, float y, float w, float h) {
            glBegin(GL_QUADS);
            glVertex2f(x, y);
            glVertex2f(x + w, y);
            glVertex2f(x + w, y + h);
            glVertex2f(x, y + h);
            glEnd();
        }

        void drawText(float x, float y, const char* string) {
            glRasterPos2f(x, y);
            for (int i = 0; string[i] != '\0'; i++) {
                glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, string[i]);
            }
        }

        void display() {
            glClear(GL_COLOR_BUFFER_BIT);

            // Bird
            glColor3f(1, 1, 0); // Yellow
            drawRect(100, birdY, 30, 30);

            // Pipes
            glColor3f(0, 1, 0); // Green
            drawRect(pipeX, 0, pipeWidth, gapY - gapHeight / 2);
            drawRect(pipeX, gapY + gapHeight / 2, pipeWidth, WINDOW_HEIGHT);

            // Score
            glColor3f(0, 0, 0); // Black
            char scoreText[20];
            sprintf(scoreText, "Score: %d", score);
            drawText(10, WINDOW_HEIGHT - 30, scoreText);

            // Instructions or Game Over
            if (!gameStarted) {
                glColor3f(0, 0, 0);
                drawText(270, 300, "Press SPACE to Start");
            } else if (gameOver) {
                glColor3f(1, 0, 0);
                drawText(250, 300, "Game Over! Press SPACE to Restart.");
            }

            glutSwapBuffers();
        }

        void update(int value) {
            if (gameStarted && !gameOver) {
                // Bird physics
                birdVelocity += gravity;
                birdY += birdVelocity;

                // Pipe movement
                pipeX -= 5.0f;

                if (pipeX + pipeWidth < 0) {
                    pipeX = WINDOW_WIDTH;
                    gapY = rand() % 400 + 100;
                    passedPipe = false;
                }

                // Scoring
                if (!passedPipe && pipeX + pipeWidth < 100) {
                    score++;
                    passedPipe = true;
                }

                // Collision
                if (birdY < 0 || birdY + 30 > WINDOW_HEIGHT ||
                    (pipeX < 130 && pipeX + pipeWidth > 100 &&
                    (birdY < gapY - gapHeight / 2 || birdY + 30 > gapY + gapHeight / 2))) {
                    gameOver = true;
                }
            }

            glutPostRedisplay();
            glutTimerFunc(16, update, 0);
        }

        void keyboard(unsigned char key, int x, int y) {
            if (key == 32) { // Spacebar
                if (!gameStarted) {
                    gameStarted = true;
                    birdVelocity = 8.0f;
                } else if (gameOver) {
                    // Restart game
                    birdY = 300;
                    birdVelocity = 0;
                    pipeX = WINDOW_WIDTH;
                    gapY = rand() % 400 + 100;
                    score = 0;
                    passedPipe = false;
                    gameOver = false;
                    gameStarted = false;  // Wait again for space to start
                } else {
                    birdVelocity = 8.0f;
                }
            }
        }

        void init() {
            glClearColor(0.5f, 0.8f, 1.0f, 1); // Sky blue background
            glMatrixMode(GL_PROJECTION);
            gluOrtho2D(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT);
            srand(time(NULL));
        }

        int main(int argc, char** argv) {
            glutInit(&argc, argv);
            glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
            glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
            glutCreateWindow("Flappy Bird in C - With Score & Start Delay");

            init();
            glutDisplayFunc(display);
            glutKeyboardFunc(keyboard);
            glutTimerFunc(0, update, 0);
            glutMainLoop();
            return 0;
        }

